import random

tile_position_vector = [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(2,4),(3,1),(3,2),(3,3),(3,4),(3,5),(4,1),(4,2),(4,3),(4,4),(5,1),(5,2),(5,3)]
## tile position vector (x,y) where x is column and y is row
random.shuffle(tile_position_vector)

desert_location = tile_position_vector.pop()
## sets the location of the desert because desert is not assigned a tile dice number

resources = ['wheat','wheat','wheat','wheat','sheep','sheep','sheep','sheep','wood','wood','wood','wood','brick','brick','brick','stone','stone','stone']
random.shuffle(resources)

board_dice_numbers=[2,3,3,4,4,5,5,6,6,8,8,9,9,10,10,11,11,12]
random.shuffle(board_dice_numbers)

board = zip(tile_position_vector, resources, board_dice_numbers)
board.append((desert_location,'desert',7))

vertice_location_dictionary = {1:[(1,1)],2:[(1,1)],3:[(1,1),(1,2)],4:[(1,2)],5:[(1,2),(1,3)],6:[(1,3)],7:[(1,3)],8:[(2,1)],9:[(1,1),(2,1)],10:[(1,1),(2,1),(2,2)],11:[(1,1),(1,2),(2,2)],
                      12:[(1,2),(2,2),(2,3)],13:[(1,2),(1,3),(2,3)],14:[(1,3),(2,3),(2,4)],15:[(1,3),(2,4)],16:[(2,4)],17:[(3,1)],18:[(2,1),(3,1)],19:[(2,1),(3,1),(3,2)],
                      20:[(2,1),(2,2),(3,2)],21:[(2,2),(3,2),(3,3)],22:[(2,2),(2,3),(3,3)],23:[(2,3),(3,3),(3,4)],24:[(2,3),(2,4),(3,4)],25:[(2,4),(3,4),(3,5)],
                      26:[(2,4),(3,5)],27:[(3,5)],28:[(3,1)],29:[(3,1),(4,1)],30:[(3,1),(3,2),(4,1)],31:[(3,2),(4,1),(4,2)],32:[(3,2),(3,3),(4,2)],33:[(3,3),(4,2),(4,3)],
                      34:[(3,3),(3,4),(4,3)],35:[(3,4),(4,3),(4,4)],36:[(3,4),(3,5),(4,4)],37:[(3,5),(4,4)],38:[(3,5)],39:[(4,1)],40:[(4,1),(5,1)],41:[(4,1),(4,2),(5,1)],
                      42:[(4,2),(5,1),(5,2)],43:[(4,2),(4,3),(5,2)],44:[(4,3),(5,2),(5,3)],45:[(4,3),(4,4),(5,3)],46:[(4,4),(5,3)],47:[(4,4)],48:[(5,1)],49:[(5,1)],
                      50:[(5,1),(5,2)],51:[(5,2)],52:[(5,2),(5,3)],53:[(5,3)],54:[(5,3)]}


class player(object):
    def __init__(self,name):
        self.name = name
        self.structures = []
        self.roads = []
        self.longest_road = False
        self.victory_points = 0
        self.development_cards = []
        self.brick_inventory = 0
        self.wheat_inventory = 0
        self.wood_inventory = 0
        self.sheep_inventory = 0
        self.stone_inventory = 0

    def display_inventory(self):
        print "Brick inventory: " + str(self.brick_inventory)
        print "Wheat inventory: " + str(self.wheat_inventory)
        print "Wood inventory: " + str(self.wood_inventory)
        print "Sheep inventory: " + str(self.sheep_inventory)
        print "Stone invetory: " + str(self.stone_inventory)

    def can_afford_settlement(self):
        if self.brick_inventory >= 1 & self.wheat_inventory >= 1 & self.wood_inventory >= 1 & self.sheep_inventory >= 2:
            return True
        else:
            return False

    def can_afford_road(self):
        if self.brick_inventory >= 1 & self.wood_inventory >= 1:
            return True
        else:
            return False

    def can_afford_settlement(self):
        if self.brick_inventory >= 1 & self.wheat_inventory >= 1 & self.wood_inventory >= 1 & self.sheep_inventory >= 2:
            return True
        else:
            return False
        
    def can_afford_city(self):
        if sself.wheat_inventory >= 1 & self.stone_inventory >= 3:
            return True
        else:
            return False

    def can_afford_dev_card(self):
        if self.wheat_inventory >= 1 & self.sheep_inventory >= 1 & self.stone_inventory >= 1:
            return True
        else:
            return False

    def display_victory_points(self):
        print "Victory points: %d" % self.victory_points

    def increase_brick(self):
        self.brick_inventory += 1

    def increase_stone(self):
        self.stone_inventory += 1

    def increase_sheep(self):
       self.sheep_inventory += 1

    def increase_wood(self):
        self.wood_inventory += 1

    def increase_wheat(self):
        self.wheat_inventory += 1

    def buy_settlement(self):
        if self.brick_inventory >= 1 & self.sheep_inventory >= 1 & self.wood_inventory >= 1 & self.wheat_inventory >= 1 :
            print "You bought a settlement!"
            self.victory_points += 1
            self.buildings.append('settlement')
            self.brick_inventory -= 1
            self.sheep_inventory -= 1
            self.wood_inventory -= 1
            self.wheat_inventory -= 1
        else:
            print "You don't have enough resources for that!"

    def display_structures(self):
        print self.structures
  
##    def trade_resources_bank(self):
##        if self.has_port == True:
##            break

victory_point_value = {'settlement':1,'city':2, 'longest_road': 2, 'largest_army': 2, 'victory_dev_card': 1}

player_list = []
turn_counter = 0

def start_game():
    number_of_players = int(raw_input("How many players? (Min 2; Max 4)"))
    if number_of_players not in (2,3,4):
        print "Please enter a valid number."
        start_game()
    else:
        for num in range(0, number_of_players):
            name = raw_input("What is the name of Player " + str(num + 1) + "? ")
            player_list.append(player(name))
            


start_game()

class settlement(object):
    def __init__(self, vertice_location):
        self.vertice_location = vertice_location
        self.adjacent_tiles = vertice_location_dictionary[vertice_location]
        
print settlement(2).adjacent_tiles

num_of_players = len(player_list)
print num_of_players




for i in range(0,num_of_players):
    print i
for i in range(num_of_players - 1,-1,-1):
    print i


for player in player_list:
    print player.name
    player.display_inventory()
